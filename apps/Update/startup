local args = {"RedOS","rOS"}
local function loading()
local tTable={"\\","|","/","-",}
for i,1,4 do
term.setCursorPos(w/2,h/2+1)
print(tTable[i])
os.sleep(.01)
end
end
args[3] = args[3] or "master"
args[4] = args[4] or ""
if not automated and #args < 2 then
        print("Usage:\n"..shell.getRunningProgram().." <user> <repo> [branch=master] [path=/]") error()
end
local function save(data,file)
        local file = shell.resolve(file)
        if not (fs.exists(string.sub(file,1,#file - #fs.getName(file))) and fs.isDir(string.sub(file,1,#file - #fs.getName(file)))) then
                if fs.exists(string.sub(file,1,#file - #fs.getName(file))) then fs.delete(string.sub(file,1,#file - #fs.getName(file))) end
                fs.makeDir(string.sub(file,1,#file - #fs.getName(file)))
        end
        local f = fs.open(file,"w")
        f.write(data)
        f.close()
end
local function download(url, file)
        save(http.get(url).readAll(),file)
end
if not fs.exists("apps/Update/json") then
        print("")
        download("http://pastebin.com/raw.php?i=4nRg9CHU","apps/Update/json")
end
os.loadAPI("apps/Update/json")
paintutils.drawFilledBox(1,1,w,h,1)
term.setCursorPos((w-8)/2,h/2)
print("Updating")
status(1,false)
if pre_dl then loadstring(pre_dl)() else print("") end
local data = json.decode(http.get("https://api.github.com/repos/"..args[1].."/"..args[2].."/git/trees/"..args[3].."?recursive=1").readAll())
if data.message and data.message == "Not found" then error("Invalid repository",2) else
	for k,v in pairs(data.tree) do
	loading()
	status(1,false)
		-- Make directories
		if v.type == "tree" then
			fs.makeDir(fs.combine(args[4],v.path))
			if not hide_progress then
			end
		end
	end
	for k,v in pairs(data.tree) do
	loading()
	status(1,false)
		-- Download files
		if v.type == "blob" then
			download("https://raw.github.com/"..args[1].."/"..args[2].."/"..args[3].."/"..v.path,fs.combine(args[4],v.path))
			if not hide_progress then
			end
		end
	end
end
if post_dl then loadstring(post_dl)() end